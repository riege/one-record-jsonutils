/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.riege.onerecord.jsonutils;

import java.text.SimpleDateFormat;
import java.time.OffsetDateTime;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

public class JacksonObjectMapper {

    /**
     * @return a com.fasterxml.jackson based ObjectMapper suitable for IATA ONE Record
     *          not writing out timezone offset for OffsetDateTime data
     *          which could be easily used e.g. via
     *          <code>buildMapper().writerWithDefaultPrettyPrinter().writeValueAsString(object);</code>
     */
    public static ObjectMapper buildMapperWithoutTimezone() {
        ObjectMapper mapper = basicMapper();
        // Since JOPA 0.18.0 (https://github.com/kbss-cvut/jopa/releases/tag/v0.18.0),
        // the generator has
        // Implemented full support for Java 8 date/time API. It is now the preferred way of representing temporal data (#95).
        //
        // Here comes a hack to write OffsetDateTime without timezone:
        SimpleModule simpleModule = new SimpleModule();
        simpleModule.addSerializer(OffsetDateTime.class, new OffsetDateTimeWithoutTimezoneSerializer());
        mapper.registerModule(simpleModule);
        return mapper;
    }

    /**
     * @return a com.fasterxml.jackson based ObjectMapper suitable for IATA ONE Record
     *          with writing out timezone offset for OffsetDateTime data
     *          which could be easily used e.g. via
     *          <code>buildMapper().writerWithDefaultPrettyPrinter().writeValueAsString(object);</code>
     */
    public static ObjectMapper buildMapperWithTimeZone() {
        ObjectMapper mapper = basicMapper();
        return mapper;
    }

    private static ObjectMapper basicMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        // mapper.disable(SerializationFeature.WRAP_ROOT_VALUE);

        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        // Note: setDateFormat does not apply on OffsetDateTime and other JDK 8 date/time
        //       but is configured here for regular java.util.Date fields
        // mapper.disable(SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE);
        mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"));

        // Note: We map "types" to "@type" here:
        SerializerFactory serializerFactory = BeanSerializerFactory.instance
            .withSerializerModifier(new ONERecordBeanSerializerModifier());
        mapper.setSerializerFactory(serializerFactory);

        mapper.registerModule(new JavaTimeModule());
        return mapper;
    }

}
